[mongrel2]
; parameters for connecting to mongrel - these need to match the
; parameters used in the mongrel2 configuration.
in_endpoint  = ipc:///tmp/mongrel_send
out_endpoint = ipc:///tmp/mongrel_recv
; max-age setting in seconds. this controls the cache-related headers
; in the HTTP response.
max_age = 432000
; if the queue length is greater than this length (per broker) then
; a dirty tile will be returned to the client rather than causing a
; re-render. 
queue_threshold_stale = 100
; if the queue length (per broker) is longer than this, and a tile
; would need to be rendered for the client, return a 202 and try a
; low-priority render in the background.
queue_threshold_satisfy = 500
; if the queue length (per broker) is longer than this, and a tile
; would need to be rendered for the client, then return a 503 error
; instead. 
queue_threshold_max = 1000
; if this parameter is set, then even when the queue length is less
; than the stale threshold and a tile is dirty, then the tile will be
; returned and a low priority bulk render will be added to the queue.
stale_render_background = true
; for the handler, multiple storage interface instances are run in
; threads. this parameter controls the maximum number of them which
; will run concurrently.
max_io_concurrency = 8

; Template for tile URL path. This must include the STYLE, Z, X, Y,
; and FORMAT parameters and can include optional other parameters.
; The prefix must be the same as in the routes setting of the Mongrel2
; configuration. The /dirty and /status suffixes are allowed automatically
; and must not be added to this template setting.
; Do NOT use any characters that have special meaning in regular
; expressions, such as +*?[]().
tile_path_template = /tiles/1.0.0/{STYLE}/{Z}/{X}/{Y}.{FORMAT}

[tiles]
; the type parameter controls which storage "plugin" will be
; instantiated to handle storage requests. the simplest of these is
; "disk", which stores tiles in metatile format similar to renderd.
type = disk
; root directory for metatile files.
tile_dir = /var/lib/rendermq/tiles

;; the formats section says which formats are available for each style
;; name. the key is the style name and the value is a comma-delimited
;; list of formats which are supported (gif, jpeg, png, json).
[formats]
map = jpeg
hyb = gif, png

;; force re-write of tile formats: this optional section allows the
;; format to be coerced for various styles to the format on the right
;; hand side.
[forced_formats]
map = jpeg
hyb = gif

;; this optional section can be used to create aliases, or re-write
;; style names. this is useful when the style presentation in the URL
;; does not match the style name used internally. for example,
;; seamless upgrades from one version of a style to the next. requests
;; having a style in the key are changed to having the value as a
;; style.
[rewrite]
osm = map

;; here we list the names of all the handlers we expect to run, and
;; give each a UUID which is used to identify it on the network.
[localhost_0]
uuid=4e48102f-74f6-4633-ab4e-44efde257917
