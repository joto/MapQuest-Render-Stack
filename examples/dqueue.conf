[backend]
; you'll generally want the zmq backend. there is also a pgq backend
; which uses a PostgreSQL queue, but this hasn't been used in a while
; and there's no guarantee that it will work.
type = zmq

[zmq]
; list the names of all the brokers here - the broker's name will be
; used to look up the network configuration of the broker, so they
; need to match section headings below.
broker_names = broker_localhost
; the heartbeat time is the number of seconds between heartbeats sent
; by the broker. this should be high enough that outages are detected
; quickly, but low enough that heartbeat messages don't flood the
; network.
heartbeat_time = 5

; if a tile that is being rendered is not finished after this time
; (which probably means the renderer had some problems) it is
; resubmitted to the queue so that a different worker can try
; again. if this is set too low, tiles that are slow to render will
; be rendered multiple times making rendering even slower. if it
; is set too high, tiles not rendered because a renderer died will
; not be retried quickly
; default is 300 seconds (5 minutes)
zombie_time = 300

[worker]
; this controlls how long the worker will poll waiting for a job.
poll_timeout = 5

[broker_localhost]
; this section controls the network settings for this broker. there
; can (and in production settings, should) be more than one
; broker. these can be distributed around your network as you like,
; using whatever ports you like. if all your brokers are local, you
; might consider using ipc:// sockets to minimise the possibility of
; interference with other working ports.
in_req = tcp://localhost:24444
in_sub = tcp://localhost:24445
out_req = tcp://localhost:24446
out_sub = tcp://localhost:24447
monitor = tcp://localhost:24448
in_identity = broker_localhost_in
out_identity = broker_localhost_out
